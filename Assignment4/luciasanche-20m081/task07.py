# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
print(g.serialize(format="turtle"))

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery


# RDFLib
subClasses = g.triples((None, RDFS.subClassOf, ns.LivingThing))
print("TASK 7.1")
print("RDFLib:")
for s, p, o in subClasses:
  print(s)
print()

# SPARQL

q1 = prepareQuery('''
  SELECT ?Subclass WHERE { 
    ?Subclass rdfs:subClassOf ns:LivingThing. 
  }
  ''',
  initNs = { "ns": ns}
)
print("SPARQL:")

# Visualize the results
for r in g.query(q1):
 print(r)
print()


"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""
print("TASK 7.2")
subClasses = g.triples((None, RDFS.subClassOf, ns.Person))
individuals = set()

for s, _, _ in g.triples((None, RDF.type, ns.Person)):
    individuals.add(s)

for s,_,_ in subClasses:
  for s1, _, _ in g.triples((None, RDF.type, s)):
    individuals.add(s1)
    

print("RDFLib:")
for s in individuals:
  print(s)
print()

print("SPARQL:")
q2 = prepareQuery('''
    SELECT ?individual WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person .
    }
    ''', initNs={'rdf': RDF, 'rdfs': RDFS, 'ns': ns})   

# Visualize the results
for r in g.query(q2):
 print(r)
print()


"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""
print("TASK 7.3")

q3 = prepareQuery('''
     SELECT ?individual WHERE {
        {
            ?individual rdf:type ns:Person .
        }
        UNION
        {
            ?individual rdf:type ns:Animal .
        }
    }
    ''', 
    initNs={'rdf': RDF, 'ns': ns})   

# Visualize the results
for r in g.query(q3):
 print(r)
print()
 

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

print("TASK 7.4")
vcard_rdf = "http://www.w3.org/2001/vcard-rdf/3.0/"
foaf = "http://xmlns.com/foaf/0.1/"
q4 = prepareQuery('''
    SELECT ?name WHERE {
        ?person rdf:type/rdfs:subClassOf* ns:Person .
        ?person foaf:knows ns:RockySmith .
        ?person vcardrdf:FN ?name .
    }
    ''', 
    initNs={'rdf': RDF, 'rdfs': RDFS, 'ns': ns, 'foaf': foaf, 'vcardrdf':vcard_rdf})   

# Visualize the results
for r in g.query(q4):
 print(r)
print()
"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""
print("TASK 7.5")
q5 = prepareQuery('''
    SELECT ?animal WHERE {
        ?animal rdf:type ns:Animal .
        ?animal foaf:knows ?animal2 .
        ?animal2 rdf:type ns:Animal
    }
    ''', 
    initNs={'rdf': RDF, 'ns': ns, 'foaf': foaf})   

# Visualize the results
for r in g.query(q5):
 print(r)
print()

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""
print("TASK 7.6")

q5 = prepareQuery('''
    SELECT ?age WHERE {
        ?livingThing rdf:type/rdfs:subClassOf* ns:LivingThing .
        ?livingThing foaf:age ?age .
    } ORDER BY DESC(?age)
    ''', 
    initNs={'rdf': RDF, 'rdfs': RDFS,'ns': ns, 'foaf': foaf})   

# Visualize the results
for r in g.query(q5):
 print(r)