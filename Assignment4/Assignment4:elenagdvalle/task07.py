# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-U19bmtOi_h59jIKW2i3vh-d0PkQJZT8

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
ns = Namespace("http://somewhere#")

g.bind("foaf", foaf)
g.bind("vcard", vcard)
g.bind("ns", ns)

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

print('Results Task 7.1: All subclasses of living thing')

# RDFLib
ns = Namespace("http://somewhere#")
print('\n')
print('Results Task 7.1 - RDFLib')
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# SPARQL
q1 = """
SELECT ?s WHERE {
  ?s rdfs:subClassOf <http://somewhere#LivingThing> .
  }
  """
print('\n')
print('Results Task 7.1 - SPARQL')
for r in g.query(q1):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

print('Results Task 7.2: All individuals of person')

# RDFLib
print('\n')
print('Results Task 7.2 - RDFLib')
for s, p, o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for subclass, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
    for s, p, o in g.triples((None, RDF.type, subclass)):
        print(s)

# SPARQL
q2 = """
    SELECT ?ind WHERE {
        ?ind rdf:type ?class .
        ?class rdfs:subClassOf* <http://somewhere#Person> .
    }
"""
print('\n')
print('Results Task 7.2 - SPARQL')
for row in g.query(q2):
    print(row[0])

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# SPARQL
q3 = """
    SELECT ?individual WHERE {
        ?individual rdf:type ?class .
        FILTER (?class = <http://somewhere#Person> || ?class = <http://somewhere#Animal>)
    }
"""

print('Results Task 7.3: All individuals of just either person or animal')
individuals = []
for row in g.query(q3):
    individuals.append(str(row[0]))
for individual in individuals:
  print(individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?name
WHERE {
  ?person foaf:knows <http://somewhere#RockySmith> .
  ?person vcard:FN ?name .
}
"""

print('Results Task 7.4: Name of the persons who know Rocky')
for row in g.query(q4):
    print(row[0])

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX ns: <http://somewhere#>

SELECT DISTINCT ?animalName
WHERE {
  ?animal rdf:type ns:Animal .
  ?animal foaf:knows ?otherAnimal .
  ?otherAnimal rdf:type ns:Animal .
  ?animal vcard:FN ?animalName .
}
"""

print('Results Task 7.5: Name of those animals who know at least another animal')
for row in g.query(q5):
    print(f"{row['animalName']}")

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**

"""

q6 = """
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?thing ?age
WHERE {
    ?thing foaf:age ?age .
}
ORDER BY DESC(?age)
"""

print("Results Task 7.6: Things and their ages in descending order")
for row in g.query(q6):
    print(f"{row['thing']}, {row['age']}")