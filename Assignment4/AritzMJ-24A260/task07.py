# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jRERkVbSXnzCuIlLyQJs1hBsx-j1zb9v

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns=Namespace("http://somewhere#")



q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
  }
''', initNs={'rdfs': RDFS, 'ns': ns})

# Visualize the results
#RDFLib
for subj, pred, obj in g.triples((None, RDFS.subClassOf, None)):
    print(subj,pred, obj)

#SPARQL
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
#RDFLib
individuals = []

for indiv in g.subjects(RDF.type, ns.Person):
    individuals.append(indiv)
for subclass in g.subjects(RDFS.subClassOf, ns.Person):
    for indiv in g.subjects(RDF.type, subclass):
        individuals.append(indiv)

#Sparql
q2 = prepareQuery('''
  SELECT ?individual WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?individual rdf:type ?class .
  }
''', initNs={'rdfs': RDFS, 'rdf': RDF, 'ns': ns})

# Visualizar los resultados
for indiv in individuals:
    print(f"Individual: {indiv}")

for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3='''
SELECT ?individuals WHERE {
  {?individuals rdf:type ns:Person .}
  UNION
  {?individuals rdf:type ns:Animal .}
}
'''

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib.namespace import FOAF
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4=prepareQuery('''
SELECT ?name WHERE {
    ?person foaf:knows ns:RockySmith .
    ?person vcard:FN ?name .
}
''', initNs={'foaf': FOAF, 'ns': ns,'vcard': vcard})



# Visualize the results
for r in g.query(q4):
    print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q5 = prepareQuery('''
  SELECT ?name WHERE {
    ?animal rdf:type ns:Animal.
    ?other rdf:type ns:Animal.
    ?animal foaf:knows ?other.
    OPTIONAL {?animal vcard:FN ?name. }
    OPTIONAL { ?animal vcard:Given ?name. }
  }
  ''',
  initNs={'ns': ns, 'foaf': FOAF, 'vcard': vcard}
)



# Visualize the results
for r in g.query(q5):
    print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = prepareQuery('''
  SELECT ?livingThing ?age WHERE {
    ?livingThingClass rdfs:subClassOf* ns:LivingThing.
    ?livingThing rdf:type ?livingThingClass .
    ?livingThing foaf:age ?age .
  }
  ORDER BY DESC(?age)
''',
  initNs={'ns': ns, 'vcard': vcard, 'rdf': RDF}
)
# Visualize the results
for r in g.query(q6):
    print(r.livingThing,r.age)