# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

g = Graph()
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
schema = Namespace("http://schema.org/")
ns = Namespace("http://somewhere#")
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage + "/rdf/example5.rdf", format="xml")
g.parse(github_storage + "/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# I AM ASSUMING HERE DIRECT SUBCLASSES
q1 = """
    SELECT ?subclass
    WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing .
    }
"""

for r in g.query(q1):
    print(r)

print()

for subclass in g.subjects(RDFS.subClassOf, ns.LivingThing):
    print(subclass)

print()

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""

q2 = """
    SELECT ?individual
    WHERE {
        ?individual a ?type .
        ?type rdfs:subClassOf* ns:Person .
    }
"""

for r in g.query(q2):
    print(r)

print()


def recursiveSubClassOf(graph, class_uri):
    subclasses = {class_uri}
    for subclass in graph.subjects(RDFS.subClassOf, class_uri):
        subclasses += recursiveSubClassOf(graph, subclass)  # Get subclasses* of subclass too
    return subclasses


# Get all subclasses of ns:Person
person_subclasses = recursiveSubClassOf(g, ns.Person)

# Find all individuals of Person and its subclasses
for subclass in person_subclasses:
    for individual in g.subjects(RDF.type, subclass):
        print(individual)

print()

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**"""

q3 = """
    SELECT ?individual
    WHERE {
        {
        ?individual a ns:Person .
        }
        UNION
        {
            ?individual a ns:Animal .
        }
    } 
    
"""

for r in g.query(q3):
    print(r)

print()

"""**TASK 7.4: List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
    SELECT ?person ?name
    WHERE {
        {
            {?person foaf:knows ns:RockySmith .}
            UNION
            {ns:RockySmith foaf:knows ?person .}
        }
        ?person <http://www.w3.org/2001/vcard-rdf/3.0/FN> ?name .
    }
"""

for r in g.query(q4):
    print(r)

print()

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
    SELECT ?animal ?c ?name
    WHERE {
        ?animal a ns:Animal .
        ?animal foaf:knows ?otherAnimal .
        ?otherAnimal a ns:Animal .
        ?animal <http://www.w3.org/2001/vcard-rdf/3.0/FN> ?name .
    }
"""

for r in g.query(q5):
    print(r)

print()

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """
    SELECT ?livingThing ?c ?age
    WHERE {
        ?subClass rdfs:subClassOf* ns:LivingThing .
        ?livingThing a ?subClass .
        ?livingThing a ?subClass .
        ?livingThing <http://xmlns.com/foaf/0.1/age> ?age .
    }
    ORDER BY DESC(?age)
"""

for r in g.query(q6):
    print(r)

print()
