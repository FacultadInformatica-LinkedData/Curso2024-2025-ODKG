# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P0xTS31q1P7nR4efg0Yy3QrClOxqMAe

**Task 08: Completing missing data**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef

g1 = Graph()
g2 = Graph()
g1.parse(github_storage + "rdf/data01.rdf", format="xml")
g2.parse(github_storage + "rdf/data02.rdf", format="xml")

vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
schema = Namespace("http://schema.org/")
ns = Namespace("http://somewhere#")
data = Namespace("http://data.org#")
g1.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g1.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given 
name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas 
SPARQL o iterar el grafo, o ambas cosas."""


q1 = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
PREFIX data: <http://data.org#>

SELECT ?person ?givenName ?familyName ?email
WHERE {
    ?person a ?type .
    ?type rdfs:subClassOf* data:Person .
    OPTIONAL { ?person vcard:givenName ?givenName } .
    OPTIONAL { ?person vcard:familyName ?familyName } .
    OPTIONAL { ?person vcard:email ?email }
}
"""

to_fill = g1.query(q1)
for t in to_fill:
    print(t)
print()


q1 = """
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
PREFIX data: <http://data.org#>

SELECT ?person ?givenName ?familyName ?email
WHERE {
    ?person a ?type .
    ?type rdfs:subClassOf* data:Person .
    # OPTIONAL { ?person ?property ?value } .
    OPTIONAL { ?person vcard:Given ?givenName } .
    OPTIONAL { ?person vcard:FN ?familyName } .
    OPTIONAL { ?person vcard:EMAIL ?email }
}
"""

filled = g2.query(q1)
for t in filled:
    print(t)
print()


for t1 in to_fill:
    for t2 in filled:
        if t1[0] == t2[0]:
            if t1[1] is not None: g1.add((t1[0], vcard.Given, t1[1]))
            if t1[2] is not None: g1.add((t1[0], vcard.FN, t1[2]))
            if t1[3] is not None: g1.add((t1[0], vcard.EMAIL, t1[3]))
