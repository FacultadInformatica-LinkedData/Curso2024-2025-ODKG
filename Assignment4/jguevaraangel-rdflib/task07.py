# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yn88giXvua452XQ1AQxcrbydUdxKEmy_

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO

ns = Namespace("http://somewhere#")
# RDFLib
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

# SPARQL
from rdflib.plugins.sparql import prepareQuery
q1 = prepareQuery("""
  SELECT ?subclass
  WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
  }
  """,
  initNs = {"rdfs":RDFS, "ns":ns}
)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# RDFLib
for s,p,o in g.triples((None, None, ns.Person)):
  print(s)

#SPARQL
q2 = prepareQuery("""
  SELECT ?individual
  WHERE {
    ?individual ?property ns:Person .
  }
  """,
  initNs = {"ns":ns}
)

# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery("""
  SELECT ?individual
  WHERE {
    {?individual rdf:type ns:Person .}
    UNION
    {?individual rdf:type ns:Animal .}
  }
  """,
  initNs = {"rdf": RDF, "ns":ns}
)

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib import FOAF
q4 = prepareQuery('''
  SELECT ?name WHERE {
    {
      ?name rdf:type ns:Person .
      ?name foaf:knows ns:RockySmith .
    }
    UNION {
      ?class rdfs:subClassOf ns:Person .
      ?name rdf:type ?class .
      ?name foaf:knows ns:RockySmith .
    }
  }
  ''',
  initNs = {"rdf": RDF, "rdfs":RDFS, "ns":ns, "foaf":FOAF}
)


# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
from rdflib import FOAF
q5 = prepareQuery('''
  SELECT DISTINCT ?name WHERE {
    ?name rdf:type ns:Animal .
    ?class rdf:type ns:Animal .
    ?name foaf:knows ?class .
  }
  ''',
  initNs = {"rdf": RDF, "ns":ns, "foaf":FOAF}
)


# Visualize the results
for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
from rdflib import FOAF
q6 = prepareQuery('''
    SELECT ?name ?age WHERE {
        ?name foaf:age ?age
    }
    ORDER BY DESC(?age)
  ''',
  initNs = {"rdfs":RDFS, "ns":ns, "foaf":FOAF}
)


# Visualize the results
for r in g.query(q6):
  print(r)