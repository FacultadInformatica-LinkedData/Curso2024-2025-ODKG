# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qbSTuCy8OfcbBCQRZZDr9qUUSWLO9Oyl

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef,RDF
from rdflib.namespace import OWL
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos.

We define the namespaces
"""

vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://data.org#")

"""Now, we iterate the elements in the first graph and we link them with the coincidences in the second graph.

"""

individuals_g1 = {}
individuals_g2 = {}

# We get the individuals of the first graph that have both given and family
for person in g1.subjects(RDF.type, None):
    given = g1.value(person, vcard.Given)
    family = g1.value(person, vcard.Family)
    if given and family:

        individuals_g1[(given, family)] = person

# We get the individuals of the second graph that have both given and family
for person in g2.subjects(RDF.type, None):
    given = g2.value(person, vcard.Given)
    family = g2.value(person, vcard.Family)
    if given and family:

        individuals_g2[(given, family)] = person

# We compare the values of the tow sets and add the link if they are the same
for key, person1 in individuals_g1.items():
    if key in individuals_g2:
        person2 = individuals_g2[key]
        g3.add((person1, OWL.sameAs, person2))
        print(f"Added link between {person1} y {person2}")

# Visualize the linked data in g3
for s, p, o in g3:
    print(s, p, o)