# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qcVsgT17xTrEUCsohtX1eOaqT9FlR_1M

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef, RDF
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas.

We declare the namespaces
"""

vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://data.org#")

"""We obtain all the elements of the class Person in the first graph"""

query = """
SELECT ?person ?given ?family ?email WHERE {
    ?person a ns:Person .
    OPTIONAL { ?person vcard:Given ?given . }
    OPTIONAL { ?person vcard:Family ?family . }
    OPTIONAL { ?person vcard:EMAIL ?email . }
}
"""

for r in g1.query(query,initNs={'ns': ns,'vcard': vcard}):
    print(f"Person: {r.person}, Given: {r.given}, Family: {r.family}, Email: {r.email}")

"""Now we iterate in the second graph and complete the missing data of the first graph"""

for row in g2.query(query, initNs={'ns': ns, 'vcard': vcard}):
    person = row.person


    if person in g1.subjects(RDF.type, ns.Person):
        if row.given and (person, vcard.Given, None) not in g1:
            g1.add((person, vcard.Given, row.given))
            print(f"Added Given: {row.given} for {person}")
        if row.family and (person, vcard.Family, None) not in g1:
            g1.add((person, vcard.Family, row.family))
            print(f"Added Family: {row.family} for {person}")
        if row.email and (person, vcard.EMAIL, None) not in g1:
            g1.add((person, vcard.EMAIL, row.email))
            print(f"Added Email: {row.email} for {person}")

"""We visualize again the data updated"""

for r in g1.query(query,initNs={'ns': ns,'vcard': vcard}):
    print(f"Person: {r.person}, Given: {r.given}, Family: {r.family}, Email: {r.email}")