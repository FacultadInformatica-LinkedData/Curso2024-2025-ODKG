# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wJGHI6xAOwBOB5IMnqjSGGA8kNqig86f

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
query1 = """
SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing .
}
"""
for r in g.query(query1):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
query2 = """
SELECT ?individual WHERE {
    ?individual rdf:type/rdfs:subClassOf* ns:Person .
}
"""

# Visualize the results
for r in g.query(query2):
    print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
query3 = """
SELECT ?i WHERE {
    ?i rdf:type ?type .
    FILTER (?type IN (ns:Person, ns:Animal))
}
"""

# Visualize the results
for r in g.query(query3):
    print(r.i)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO

query4 = """SELECT ?v WHERE {
    ?s foaf:knows ns:RockySmith .
    ?s vcard:FN ?v.
  }"""


for r in g.query(query4,initNs={'ns': ns, 'foaf': foaf, 'vcard': vcard}):
    print(r.v)
# Visualize the results

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO

query5 = """
SELECT distinct ?name ?given WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otherAnimal .
    OPTIONAL { ?animal vcard:FN ?name . }
    OPTIONAL { ?animal vcard:Given ?name . }
}
"""

for r in g.query(query5,initNs={'ns': ns, 'foaf': foaf, 'vcard': vcard}):
    print(r.name)
# Visualize the results

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
query6 = """
SELECT ?name ?age WHERE {
    ?livingThing rdf:type/rdfs:subClassOf* ns:LivingThing .
    ?livingThing foaf:age ?age .
    ?livingThing vcard:FN ?name .
}
ORDER BY DESC(?age)
"""


results = g.query(query6, initNs={'ns': ns, 'vcard': vcard, 'rdf': RDF, 'rdfs': RDFS, 'foaf': FOAF})

# Visualize the results
for name, age in results:
    print(f"{name}: {age}")