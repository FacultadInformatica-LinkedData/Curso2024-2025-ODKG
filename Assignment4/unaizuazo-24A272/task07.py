# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1To6t44ssIPdQ8CgavRDE1_Aje6kZoeld

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO

q1 = '''
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?subclass
WHERE {
  ?subclass rdfs:subClassOf ns:LivingThing .
}

'''



# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

q2 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?person
WHERE {
  {
    ?person rdf:type ns:Person .
  } UNION {
    ?person rdf:type ?subclass .
    ?subclass rdfs:subClassOf ns:Person .
  }
}
'''


# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO

q3 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>

SELECT ?individual
WHERE {{
  ?individual rdf:type ns:Person .
} UNION {
  ?individual rdf:type ns:Animal .
  }
}
'''

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO

q4 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?individual
WHERE {
  ?individual foaf:knows ns:RockySmith .
}

'''

# Visualize the results
for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO

q5 = '''
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT DISTINCT ?name
WHERE {
  {?animal rdf:type ns:Animal .
  ?animal foaf:knows ?animal2 . #disregarding if someone knows himself
  ?animal2 foaf:knows ?animal . #idk if its necessary (if i know someone, does he necessarily know me?)
  ?animal vcard:FN ?name .}
}
'''

q5_alt = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT DISTINCT ?name
WHERE {
    ?animal1 rdf:type ns:Animal .
    ?animal2 rdf:type ns:Animal .
    ?animal1 foaf:knows ?animal2 .
    ?animal1 vcard:FN ?name .
    FILTER(?animal1 != ?animal2)  # Ensure they are different animals
}
"""


# Visualize the results
for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO


q6 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ns: <http://somewhere#>

SELECT ?livingThing ?age
WHERE {{
    ?livingThing rdf:type ?subclass .
    ?subclass rdfs:subClassOf ns:LivingThing .
    ?livingThing foaf:age ?age.
  } UNION {
    ?livingThing rdf:type ns:LivingThing .
    ?livingThing foaf:age ?age.
  }}
ORDER BY DESC(?age)
"""



# Visualize the results
for r in g.query(q6):
  print(r)

