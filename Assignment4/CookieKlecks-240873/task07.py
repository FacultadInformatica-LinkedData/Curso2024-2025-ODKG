# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage + "/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
vcard_rdf = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

# TO DO
from rdflib.plugins.sparql import prepareQuery

subclassesQuery = prepareQuery('''
    SELECT ?subclass
    WHERE {
        ?subclass rdfs:subClassOf* ns:LivingThing
    }
''', initNs={"rdfs": RDFS, "ns": ns})

# Visualize the results

for r in g.query(subclassesQuery):
    print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
personsQuery = prepareQuery('''
    SELECT DISTINCT ?individual
    WHERE {
        ?class rdfs:subClassOf* ns:Person .
        ?individual rdf:type ?class
    }
''', initNs={"rdfs": RDFS, "ns": ns, "rdf": RDF})
# Visualize the results
print("========= Task 7.2 ==========")
for r in g.query(personsQuery):
    print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
personsAndAnimalsQuery = prepareQuery('''
    SELECT DISTINCT ?individual
    WHERE {
        {
            ?individual rdf:type ns:Animal
        } UNION {
            ?individual rdf:type ns:Person
        }
    }
''', initNs={"rdfs": RDFS, "ns": ns, "rdf": RDF})
# Visualize the results
print("===== Task 7.3 =======")
for r in g.query(personsAndAnimalsQuery):
    print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
knowRockyQuery = prepareQuery('''
    SELECT DISTINCT ?name
    WHERE {
        ?friend foaf:knows ns:RockySmith .
        ?class rdfs:subClassOf* ns:Person . 
        ?friend rdf:type ?class .
        ?friend vcard-rdf:FN ?name .
    }
''', initNs={"rdfs": RDFS, "ns": ns, "rdf": RDF, "foaf": FOAF, "vcard-rdf": vcard_rdf})
# Visualize the results
print("===== Task 7.4 =======")
for r in g.query(knowRockyQuery):
    print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
animalsKnowAnimalsQuery = prepareQuery('''
    SELECT DISTINCT ?name
    WHERE {
        ?animal foaf:knows ns:RockySmith .
        ?class rdfs:subClassOf* ns:Animal .
        ?animal rdf:type ?class .
        ?animal vcard-rdf:Given ?name .
    }
''', initNs={"rdfs": RDFS, "ns": ns, "rdf": RDF, "foaf": FOAF, "vcard-rdf": vcard_rdf})

# Visualize the results
print("===== Task 7.5 =======")
for r in g.query(animalsKnowAnimalsQuery):
    print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
ageListQuery = prepareQuery('''
    SELECT ?age
    WHERE {
        ?class rdfs:subClassOf* ns:LivingThing .
        ?livingThing rdf:type ?class .
        ?livingThing foaf:age ?age
    }
    ORDER BY DESC(?age)
''', initNs={"rdfs": RDFS, "ns": ns, "rdf": RDF, "foaf": FOAF, "vcard-rdf": vcard_rdf})

# Visualize the results
print("===== Task 7.6 =======")
for r in g.query(ageListQuery):
    print(r)
