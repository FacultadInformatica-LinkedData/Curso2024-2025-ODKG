# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZXVTpf2xodxlK-cuNpTzI0FQmJkYF0Uu

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
# Definimos el prefijo para la consulta SPARQL
ns = Namespace("http://somewhere#")

# Consulta SPARQL para obtener todas las subclases de LivingThing
q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": ns }
)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
    print(s)
# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
   SELECT ?individual WHERE {
    {
      ?individual rdf:type ns:Person.
    } UNION {
      ?subclass rdfs:subClassOf ns:Person.
      ?individual rdf:type ?subclass.
    }
  }
  ''',
  initNs = { "rdf": RDF, "rdfs": RDFS, "ns": ns }
)


# Visualize the results
for row in g.query(q2):
    print(row.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individual WHERE {
    ?individual rdf:type ?class.
    FILTER(?class = ns:Person || ?class = ns:Animal)
  }
  ''',
  initNs = { "rdf": RDF, "ns": ns }
)

# Visualize the results
for row in g.query(q3):
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
q4 = prepareQuery('''
  SELECT ?personName WHERE {
    ?person foaf:knows ns:RockySmith.
    ?person a ns:Person.
    ?person vcard:FN ?personName.
  }
  ''',
  initNs = { "foaf": foaf, "ns": ns, "vcard": vcard }
)

# Visualize the results
for row in g.query(q4):
    print(row.personName)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**




"""

# TO DO
q5 = prepareQuery('''
  SELECT DISTINCT ?animalName WHERE {
    ?animal a ns:Animal.
    ?animal foaf:knows ?otherAnimal.
    ?otherAnimal a ns:Animal.
    ?animal vcard:Given ?animalName.
  }
  ''',
  initNs = { "foaf": foaf, "ns": ns, "vcard": vcard }
)
# Visualize the results
for row in g.query(q5):
    print(row.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
query = prepareQuery('''
  SELECT ?livingThing ?age WHERE {
    ?livingThing a/rdfs:subClassOf* ns:LivingThing.
    ?livingThing foaf:age ?age.
  }
  ORDER BY DESC(?age)
  ''',
  initNs = { "foaf": foaf, "ns": ns, "rdfs": RDFS }
)
# Visualize the results
for row in g.query(query):
    print(f"Individual: {row.livingThing}, Age: {row.age}")