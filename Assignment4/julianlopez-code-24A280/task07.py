# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1npGrwE9QzXDRDvMJW06TFyBXpCL5rUiW

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf <http://somewhere#LivingThing> .
  }
  '''
)
# This query returns the immediate subclasses of LivinThing, not the subclasses of the subclasses returned
#(I think this is the query asked)

for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q1 = prepareQuery('''
    SELECT DISTINCT ?individual
    WHERE {
    {
        ?individual a <http://somewhere#Person> .
    }
    UNION
    {
        ?individual a ?type .
        ?type rdfs:subClassOf* <http://somewhere#Person> .
    }}
    '''
)

for r in g.query(q1):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

query = """
SELECT ?individual
WHERE {
    {
        ?individual a <http://somewhere#Person> .
    }
    UNION
    {
        ?individual a <http://somewhere#Animal> .
    }
}
"""

results = g.query(query)

for row in results:
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

query = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?individual ?individualName
WHERE {
    ?individual foaf:knows <http://somewhere#RockySmith> .
    OPTIONAL {
        ?individual vcard:FN ?individualName .
    }
}
"""

results = g.query(query)

for row in results:
     print(f"Individual: {row.individual}, Name: {row.individualName if row.individualName else 'No name available'}")

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

query = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
SELECT ?animal ?animalName
WHERE {
    ?animal a <http://somewhere#Animal> .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal a <http://somewhere#Animal> .
    OPTIONAL {
        ?animal vcard:FN ?animalName .
    }
}
"""

results = g.query(query)

for row in results:
  print(f"Animal: {row.animal}, Name: {row.animalName if row.animalName else 'No name available'}")

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

query = """
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?individual ?age
WHERE {
    ?class rdfs:subClassOf* <http://somewhere#LivingThing> .
    ?individual a ?class .
    ?individual foaf:age ?age .
}
ORDER BY DESC(?age)
"""

results = g.query(query)

for row in results:
    print(f"Individual: {row.individual}, Age: {row.age}")