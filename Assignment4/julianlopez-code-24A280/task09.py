# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmGS1kjtjfvD6S0XWHoTzHF7MkrQr3AF

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

# Define namespaces
data_ns1 = Namespace("http://data.three.org#")
data_ns2 = Namespace("http://data.four.org#")
owl = Namespace("http://www.w3.org/2002/07/owl#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

query1 = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
SELECT ?person ?given ?family WHERE {
    ?person a <http://data.three.org#Person> .
    ?person vcard:Given ?given .
    ?person vcard:Family ?family .
}
"""
results_graph1 = g1.query(query1)

for row in results_graph1:
  print(f"Person: {row.person}, Name: {row.given if row.given else 'No name available'},  Family Name: {row.family if row.family else 'No family name available'}")


# Store the results in a dictionary
persons_graph1 = {}
for row in results_graph1:
    persons_graph1[(str(row.given), str(row.family))] = row.person

query2 = """
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
SELECT ?person ?given ?family WHERE {
    ?person a <http://data.four.org#Person> .
    ?person vcard:Given ?given .
    ?person vcard:Family ?family .
}
"""
results_graph2 = g2.query(query2)

for row in results_graph2:
  print(f"Person: {row.person}, Name: {row.given if row.given else 'No name available'},  Family Name: {row.family if row.family else 'No family name available'}")

for row in results_graph2:
    match_key = (str(row.given), str(row.family))
    if match_key in persons_graph1:
        g3.add((URIRef(str(persons_graph1[match_key])), owl.sameAs, URIRef(str(row.person))))

# Output the results in the new graph
print("owl:sameAs relationships in the new graph (g3):")
for s, p, o in g3:
    print(f"{s} {p} {o}")