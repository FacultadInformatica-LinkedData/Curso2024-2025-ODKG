# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ywmn5Bkub3XPxI0XqmX_zgjI4HUsJCG

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

data01_results = g1.query("""
    PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
    SELECT ?person ?given ?family ?email
    WHERE {
        ?person a <http://data.org#Person> .
        OPTIONAL { ?person vcard:Given ?given }
        OPTIONAL { ?person vcard:Family ?family }
        OPTIONAL { ?person vcard:EMAIL ?email }
    }
""")

for row in data01_results:
  print(f"Person: {row.person}, Name: {row.given if row.given else 'No name available'},  Family Name: {row.family if row.family else 'No family name available'},  Email: {row.email if row.email else 'No email available'}")

data02_results = g2.query("""
    PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
    SELECT ?person ?given ?family ?email
    WHERE {
        ?person a <http://data.org#Person> .
        OPTIONAL { ?person vcard:Given ?given }
        OPTIONAL { ?person vcard:Family ?family }
        OPTIONAL { ?person vcard:EMAIL ?email }
    }
""")

for row in data02_results:
  print(f"Person: {row.person}, Name: {row.given if row.given else 'No name available'},  Family Name: {row.family if row.family else 'No family name available'},  Email: {row.email if row.email else 'No email available'}")

# Store results in a dictionary
data02_dict = {}
for person, given, family, email in data02_results:
    data02_dict[str(person)] = {
        "given": given,
        "family": family,
        "email": email
    }

final_results = []
for person, given, family, email in data01_results:
    person_str = str(person)
    entry = {
        "person": person_str,
        "given": given,
        "family": family,
        "email": email
    }

    if person_str in data02_dict:
        if entry["given"] is None:
            entry["given"] = data02_dict[person_str]["given"]
        if entry["family"] is None:
            entry["family"] = data02_dict[person_str]["family"]
        if entry["email"] is None:
            entry["email"] = data02_dict[person_str]["email"]

    final_results.append(entry)

for result in final_results:
    print(f"Person: {result['person']}, Given: {result['given']}, Family: {result['family']}, Email: {result['email']}")

