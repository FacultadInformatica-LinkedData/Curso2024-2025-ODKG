# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RDKwEUCP7L5LlrD1KlOmM-HoDClzTW0M

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
ns=Namespace('http://somewhere#')

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# RDFLib for listing all subclasses of LivingThing
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s, p, o)

# SPARQL query to find all subclasses of LivingThing
q1= prepareQuery('''
  SELECT ?subclass
  WHERE {
      ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',

  initNs = {"rdfs": RDFS, "ns":ns}

)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# RDFLib for listing all individuals of person
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s, p, o)

for s, p, o in g.triples((None, RDF.type, ns.Researcher)):
  print(s, p, o)

for s, p, o in g.triples((None, RDF.type, ns.Professor)):
  print(s, p, o)

# SPARQL query to find all individuals of Person and its subclasses
q2 = prepareQuery("""

  SELECT ?person
  WHERE {
      {
          ?person a ns:Person
      }
      UNION
      {
          ?subclass rdfs:subClassOf ns:Person .
          ?person a ?subclass
      }
  }
  """,

  initNs = {"rdfs": RDFS, "ns":ns}

)

# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# SPARQL query to find all individuals of just Person or Animal
q3 = prepareQuery("""
  SELECT ?individual
  WHERE {
      {
          ?individual a ns:Person
      }
      UNION
      {
          ?individual a ns:Animal
      }
  }
  """,

  initNs = {"rdfs": RDFS, "ns":ns}

)

# Visualize the results
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# SPARQL query to find the names of persons who know Rocky
q4 = prepareQuery('''
  SELECT ?name
  WHERE {
      ?name foaf:knows ns:RockySmith
  }
  ''',

  initNs = { "rdfs": RDFS, "foaf": FOAF, "ns": ns }

)

# Visualize the results
for r in g.query(q4):
  print(f"{r.name} knows Rocky")

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5= prepareQuery('''
  SELECT DISTINCT ?animal
  WHERE {
    ?animal foaf:knows ?otheranimal .
    ?animal rdf:type ns:Animal .
    ?otheranimal rdf:type ns:Animal
  }
  ''',

  initNs = { "rdf": RDF,"ns":ns,"foaf":FOAF}

)

# Visualize the results
for r in g.query(q5):
  print(r.animal)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# SPARQL query to find the age of all living things in descending order
q6 = prepareQuery('''
  SELECT ?livingthing ?age
  WHERE {
      ?livingthing foaf:age ?age
  }
  ORDER BY DESC(?age)
''',

  initNs = { "rdfs": RDFS, "ns": ns }

)

# Visualize the results
for r in g.query(q6):
    print(f"{r.livingthing} has an age of {r.age}")