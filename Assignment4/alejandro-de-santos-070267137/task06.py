# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qB4lte7jIVsfIcLqUA25bdHEYlu32uqg

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

# Create a new class named "University"
g.add((ns.University, RDF.type, RDFS.Class))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

# Add Researcher as a subclass of Person
g.add((ns.Researcher, RDFS.subClassOf, ns.Person))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smithers"**"""

# Create a new individual named "Jane Smithers" of type Researcher
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

g.add((ns.JaneSmithers, RDF.type, ns.Researcher))
g.add((ns.JaneSmithers, vcard.FN, Literal("Jane Smithers")))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.4: Add to the individual JaneSmithers the email address, fullName, given and family names. Use the https://schema.org vocabulary**"""

# Import the Schema.org namespace
schema = Namespace("https://schema.org/")

# Add email, fullName, givenName, and familyName for JaneSmithers
g.add((ns.JaneSmithers, schema.email, Literal("janesmithers@example.com")))
g.add((ns.JaneSmithers, schema.name, Literal("Jane Smithers")))
g.add((ns.JaneSmithers, schema.givenName, Literal("Jane")))
g.add((ns.JaneSmithers, schema.familyName, Literal("Smithers")))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.5: Add UPM as the university where John Smith works. Use the "https://example.org/ namespace**"""

# Define the example.org namespace
ex = Namespace("https://example.org/")

# Add UPM as an individual of the class University defined at 6.1
g.add((ns.UPM, RDF.type, ns.University))
g.add((ns.UPM, RDFS.label, Literal("Universidad Polit√©cnica de Madrid")))

# Add the relationship specifying that John Smith works at UPM
g.add((ns.JohnSmith, ex.works, ns.UPM))

# Visualize the results
for s, p, o in g:
  print(s,p,o)

"""**Task 6.6: Add that John knows Jane using the FOAF vocabulary. Make sure the relationship exists.**"""

# Import the FOAF namespace
foaf = Namespace("http://xmlns.com/foaf/0.1/")

# Add the relationship that John knows Jane using FOAF vocabulary
g.add((ns.JohnSmith, foaf.knows, ns.JaneSmithers))

# Visualize the results
for s, p, o in g:
  print(s,p,o)