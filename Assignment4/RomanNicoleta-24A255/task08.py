# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17wI0ZYmBnRuEohHLVC3qfK0lY5PsG2iL

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

namespace = Namespace("http://data.org#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

print("List for elements in Graph 1:")
count_g1 = 0
for person in g1.subjects(RDF.type, namespace.Person):
    count_g1 += 1
    print(f"Person in G1: {person}")

if count_g1 == 0:
    print("0 found in Graph 1")
else:
    print(f"\nNr. of instances in Graph 1: {count_g1}")
    for person in g1.subjects(RDF.type, namespace.Person):
        given_name = g1.value(person, vcard.Given)
        family_name = g1.value(person, vcard.Family)
        email = g1.value(person, vcard.EMAIL)
        print(f"\nThe person is {person}")
        print(f"given name: {given_name}")
        print(f"family name: {family_name}")
        print(f"email: {email}")

        # Filling missing data
        if not (given_name and family_name and email):
            given_name_g2 = g2.value(person, vcard.Given)
            family_name_g2 = g2.value(person, vcard.Family)
            email_g2 = g2.value(person, vcard.EMAIL)

            if not given_name and given_name_g2:
                g1.add((person, vcard.Given, given_name_g2))
            if not family_name and family_name_g2:
                g1.add((person, vcard.Family, family_name_g2))
            if not email and email_g2:
                g1.add((person, vcard.EMAIL, email_g2))

    print("\n\n-------------------------------")
    print("\nFilled missing data in Graph 1:")
    for person in g1.subjects(RDF.type, namespace.Person):
        given_name = g1.value(person, vcard.Given)
        family_name = g1.value(person, vcard.Family)
        email = g1.value(person, vcard.EMAIL)
        print(f"\nThe person is: {person}")
        print(f"given name: {given_name}")
        print(f"family name: {family_name}")
        print(f"email: {email}")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""