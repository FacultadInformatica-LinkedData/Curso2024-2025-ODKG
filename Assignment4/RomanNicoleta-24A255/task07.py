# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-ickuMZCI25m3QB4pijEgDqr3szMCC0a

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

q1 = """
    SELECT ?subclass
    WHERE {
        ?subclass rdfs:subClassOf+ ns:LivingThing .
    }
"""

# Visualize the results
for r in g.query(q1):
 print(r[0])

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

q2 = """
    SELECT ?individual
    WHERE {
        ?individual rdf:type ?class .
        ?class rdfs:subClassOf* ns:Person .
    }
"""

# Visualize the results
for r in g.query(q2):
 print(r[0])

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q3 = """
    SELECT ?individual
    WHERE {
        ?individual rdf:type ?class .
        FILTER(?class = ns:Person || ?class = ns:Animal)
    }
"""
result = g.query(q3, initNs={"rdf": RDF, "ns": ns})

# Visualize the results
for r in g.query(q3):
 print(r[0])

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib import Graph, Namespace, RDF, RDFS

ns = Namespace("http://somewhere#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")

people_list = [s for s, _, _ in g.triples((None, RDF.type, ns.Person))]

for person in people_list:
    for s, _, _ in g.triples((person, foaf.knows, ns.RockySmith)):
        print(s)

q4 = """
    SELECT ?x
    WHERE {
        ?x rdf:type/rdfs:subClassOf* ns:Person .
        ?x foaf:knows ns:RockySmith .
    }
"""

# Visualize the results
for r in g.query(q4):
 print(r[0])

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO

from rdflib import Graph, Namespace, RDF, RDFS

ns = Namespace("http://somewhere#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

animals = [s for s, _, _ in g.triples((None, RDF.type, ns.Animal))]
for animal in animals:
    for _, _, other_animal in g.triples((animal, foaf.knows, None)):
        if (other_animal, RDF.type, ns.Animal) in g:
            name = g.value(animal, vcard.FN)
            if name:
                print(name)
            else:
                print(animal)
            break
q5 = """
    SELECT DISTINCT ?name
    WHERE {
        ?animal rdf:type ns:Animal .
        ?animal ns:knows ?otherAnimal .
        ?otherAnimal rdf:type ns:Animal .
        ?animal vcard:FN ?name .
    }
"""

# Visualize the results
for r in g.query(q5):
 print(r[0])

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q6 = """
    SELECT ?livingThing ?age
    WHERE {
        ?livingThing rdf:type/rdfs:subClassOf* ns:LivingThing .
        ?livingThing foaf:age ?age .
    }
    ORDER BY DESC(?age)
"""

vis_q6 = g.query(q6, initNs={"rdf": RDF, "rdfs": RDFS, "ns": ns, "foaf": Namespace("http://xmlns.com/foaf/0.1/")})

# Visualize the results
for r in vis_q6:
    print(f"thing: {r[0]}, its age: {r[1]}")