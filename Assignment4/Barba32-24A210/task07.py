# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-kM8iidO8uEBgnA8c577uVKzfjhvFpS6

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

for s, p, o in g:
  print(s,p,o) # Visualizar el gráfico

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
print("Usando RDFLIB")
for s, p, o in g.triples((None, RDFS.subClassOf,ns.LivingThing)):
  print(s)

print("\nUsando SPARQL")
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
   ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
    initNs = { "ns": ns, "rdfs": RDFS})

for r in g.query(q1):
 print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results

print("Usando RDFLIB")
print("Mostramos los que tienen asiganada una subclase en la clase persona:")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)): # Al incluir las subclases, si mostramos todos los que están en esta, ya incluimos a todas las personas.
    for s1, p1, o1 in g.triples((None, RDF.type, s)):
        print(s1)

print("\nMostramos los que no tienen asiganada una subclase dentro de las personas:")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

print("\nUsando SPARQL")
q2 = prepareQuery('''
  SELECT ?subject WHERE {
    { ?subject rdf:type ns:Person }
    UNION
    { ?subject rdf:type ?type .
      ?type rdfs:subClassOf ns:Person }
  }
  ''',
    initNs = { "ns": ns, "rdf": RDF}) # Aquí lo mismo, hacemos UNION, para que incluya las personas con y sin subclase, haciendo que ?type vaya siendo cada una de las subclases

for r in g.query(q2):
 print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
# Visualize the results

print("\nUsando SPARQL")
q3 = prepareQuery('''
  SELECT ?subject WHERE {
    { ?subject rdf:type ns:Person }
    UNION
    { ?subject rdf:type ns:Animal }
  }
  ''',
    initNs = { "ns": ns, "rdf": RDF}) # El or nos da la pista de que subject debe incluir persona o animal, teniendo que usar UNION.

for r in g.query(q3):
 print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
# Visualize the results
from rdflib import FOAF

print("\nUsando SPARQL")
q4 = prepareQuery('''
   SELECT ?subject WHERE {
    ?subject foaf:knows ns:RockySmith .
    FILTER(?subject != <http://somewhere#Bugs>)
  }''',
    initNs = { "ns": ns, "foaf": FOAF, "rdf":RDF}) # Nos da la pista de que hay que usar FOAF, pero sino se podría ver en el gráfico directamente. Debe ser una persona.
    # Así que quitamos los Bugs que es el único otro animal que hay.

for r in g.query(q4):
 print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
# Visualize the results
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

print("\nUsando SPARQL")
q5 = prepareQuery('''
   SELECT ?animal WHERE {
    ?animal rdf:type ns:Animal .
    ?animal foaf:knows ?otroAnimal .
    ?otroAnimal rdf:type ns:Animal .

  }''',
    initNs = { "ns": ns, "foaf": FOAF, "vcard": VCARD}) # Cogemos el animal y nos aseguramos que al que conoce también sea un animal

for r in g.query(q5):
 print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
# Visualize the results

print("\nUsando SPARQL")
q6 = prepareQuery('''
  SELECT ?age WHERE {
    { ?subject rdf:type ns:LivingThing .
      ?subject foaf:age ?age .
    }
    UNION
    { ?subject rdf:type ?type .
      ?type rdfs:subClassOf ns:LivingThing .
      ?subject foaf:age ?age .
    }
  }
  ORDER BY DESC(?age)
  ''',
    initNs = { "ns": ns, "foaf": FOAF, "rdf": RDF}) # Primero cogemos la edad de los Living Thing, uniéndolo a los qeu tienen una sublclase asignada, en orden descendente de edad.
for r in g.query(q6):
 print(r)