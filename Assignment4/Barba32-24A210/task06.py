# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PGV-5psNBsMazgf513k-bXTmp7a8kgXU

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False) # Añade al al gráfico este dominio como uno de los manager
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False) # Aquí los mismo pero usanod uno existente ya
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#") # El dominio en el que definimos que es un clase, con RDFS.
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

# TO DO
# Visualize the results
g.add((ns.University, RDF.type, RDFS.Class))
for s,p,o in g.triples((ns.University, None, None)):
  print(s,p,o)

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

# TO DO
# Visualize the results
g.add((ns.Researcher, RDFS.subClassOf, ns.Person)) # Usamos RDFS para definir la subclase
for s,p,o in g.triples((None, RDFS.subClassOf, None)):
  print(s,p,o)

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smithers"**"""

# TO DO
# Visualize the results
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
g.add((ns.JaneSmithers, RDF.type, ns.Researcher))
for s,p,o in g.triples((ns.JaneSmithers, None, None)):
  print(s,p,o)

"""**TASK 6.4: Add to the individual JaneSmithers the email address, fullName, given and family names. Use the https://schema.org vocabulary**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
from rdflib import XSD

sc = Namespace("http://schema.org/")
g.add((ns.JaneSmithers, sc.email, Literal("janesmithers@gmail.com", datatype=XSD.string)))
g.add((ns.JaneSmithers, sc.fullName, Literal("Jane Emily Smithers", datatype=XSD.string)))
g.add((ns.JaneSmithers, sc.givenName, Literal("Jane", datatype=XSD.string)))
g.add((ns.JaneSmithers, sc.familyName, Literal("Smithers", datatype=XSD.string)))

q1 = prepareQuery('''
  SELECT ?subject ?property ?value WHERE {
    ?subject ?property ?value.
    FILTER(?subject = <http://somewhere#JaneSmithers> && ?value != <http://somewhere#Researcher>)
  }
  ''',) # Buscamos el triple donde el sujeto sea JaneSmithers, pero sin mostrar que es una investigadora, ya que eso se realizó anterirormente

for r in g.query(q1):
  print(r.subject, r.property, r.value)

"""**TASK 6.5: Add UPM as the university where John Smith works. Use the "https://example.org/ namespace**"""

# TO DO
# Visualize the results
EX = Namespace("https://example.org/")
g.add((ns.JaneSmithers, EX.worksAt, Literal("UPM", datatype=XSD.string)))
for s,p,o in g.triples((ns.JaneSmithers,EX.worksAt, None)):
  print(s,p,o)

"""**Task 6.6: Add that Jown knows Jane using the FOAF vocabulary. Make sure the relationship exists.**"""

# TO DO
# Visualize the results
from rdflib import FOAF

g.add((ns.JohnSmith, FOAF.knows, ns.JaneSmithers))

for s,p,o in g.triples((None,FOAF.knows, None)):
  print(s,p,o)