# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YCkGupvNVXXwzd0CCwzdBy__Q_uPJSS-

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs={'ns': ns}
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    {
      ?SubClass rdfs:subClassOf ns:Person.
      ?Subject rdf:type ?SubClass.
    }
    UNION
    {
      ?Subject rdf:type ns:Person.
    }
  }
  ''',
  initNs={'ns': ns}
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdf:type ?Class.
    FILTER (?Class=ns:Person || ?Class=ns:Animal)
  }
  ''',
  initNs={'ns': ns}
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
foaf = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q1 = prepareQuery('''
  SELECT ?Name WHERE {
    ?Person foaf:knows ns:RockySmith.
    ?Person vcard:FN ?Name.
  }
  ''',
  initNs={'ns': ns, 'foaf': foaf, 'vcard': vcard}
)

# Visualize the results
for r in g.query(q1):
  print(r.Name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
q1 = prepareQuery('''
  SELECT DISTINCT ?Name WHERE {
    ?Animal rdf:type ns:Animal.
    ?OtherAnimal rdf:type ns:Animal.
    ?Animal foaf:knows ?OtherAnimal.
    OPTIONAL { ?Animal vcard:FN ?Name. }
    OPTIONAL { ?Animal vcard:Given ?Name. }
  }
  ''',
  initNs={'ns': ns, 'foaf': foaf, 'vcard': vcard}
)

# Visualize the results
for r in g.query(q1):
  print(r.Name)


#---------------QUITAR

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
q1 = prepareQuery('''
  SELECT ?Name ?Age WHERE {
    ?LivingThingClass rdfs:subClassOf ns:LivingThing.
    { ?LivingThing rdf:type ?LivingThingClass } UNION { ?LivingThing rdf:type ns:LivingThing }
    ?LivingThing foaf:age ?Age
    OPTIONAL { ?LivingThing vcard:FN ?Name. }
    OPTIONAL { ?LivingThing vcard:Given ?Name. }
  }
  ORDER BY DESC(?Age)
  ''',
  initNs={'ns': ns, 'foaf': foaf, 'vcard': vcard}
)

# Visualize the results
for r in g.query(q1):
  print(r.Name, r.Age)