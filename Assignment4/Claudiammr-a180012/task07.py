# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X2kT32JXvllrE_kuixQuuopVZAt3wClV

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

ns = Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
''', initNs={'ns': ns, 'rdfs': RDFS})

for r in g.query(q1):
    print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery('''
  SELECT ?individual WHERE {
    ?individual rdf:type ?type.
    ?type rdfs:subClassOf* ns:Person.
  }
''', initNs={'ns': ns, 'rdf': RDF, 'rdfs': RDFS})

for r in g.query(q2):
    print(r.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = prepareQuery('''
  SELECT ?individual WHERE {
    ?individual rdf:type ?type.
    FILTER (?type = ns:Person || ?type = ns:Animal)
  }
''', initNs={'ns': ns, 'rdf': RDF})

for r in g.query(q3):
    print(r.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

from rdflib.namespace import FOAF
q4 = prepareQuery('''
  SELECT ?instance WHERE {
    ns:RockySmith foaf:knows ?instance.
  }
  ''',
  initNs = {"ns":ns,"foaf":FOAF}
)

for r in g.query(q4):
  print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = prepareQuery('''
  SELECT ?instance WHERE {
    ?instance1 foaf:knows ?instance.
    ?instance1 a ns:Animal .
    ?instance a ns:Animal .
    filter (?instance != ?instance1)
  }
  ''',
  initNs = {"ns":ns,"foaf":FOAF}
)

for r in g.query(q5):
  print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = prepareQuery('''
  SELECT ?instance ?age WHERE {
    ?Subject rdfs:subClassOf* ns:LivingThing.
    ?instance a ?Subject .
    ?instance foaf:age ?age
  }
  order by desc(?age)
  ''',
  initNs = {"ns":ns,"foaf":FOAF}
)

for r in g.query(q6):
  print(r)