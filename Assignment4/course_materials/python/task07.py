# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CLbYJBrUSKHdt9KZHiHXI5LdXFRp-Hlo

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
q1 = prepareQuery('''
  SELECT ?subClasses WHERE {
    ?subClasses rdfs:subClassOf ns:LivingThing.
  }
  ''',
     initNs = {"ns": ns}
)

# Visualize the results
#With rdflib
for s,p,o in g.triples((None, None,None)):
  print(s,p,o)

#With sparql
for r in g.query(q1):
  print(r.subClasses)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
#with * we see all exhaustive search of subclasses from Person, as well as persons.
q1 = prepareQuery('''
  SELECT ?individuals ?subClasses  WHERE {
    ?subClasses rdfs:subClassOf* ns:Person .
    ?individuals a ?subClasses .
  }
  ''',
     initNs = {"ns": ns}
)

# Visualize the results
#With rdflib
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s,p,o)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2,p2,o2 in g.triples((None, RDF.type, s)):
    print(s2,p2,o2)

#With sparql
for r in g.query(q1):
  print(r.individuals, r.subClasses)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
#Binding just for informative reasons
q1 = prepareQuery('''
  SELECT ?individuals ?type  WHERE {
    {
       BIND(ns:Animal AS ?type).
      ?individuals a ?type .
    }
    UNION
    {
      BIND(ns:Person AS ?type) .
      ?individuals a ?type .
    }

  }
  ''',
     initNs = {"ns": ns}
)
# Visualize the results
#With sparql
for r in g.query(q1):
  print(r.individuals, r.type)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
from rdflib import FOAF
#Binding just for informative reasons
q1 = prepareQuery('''
  SELECT ?individuals  WHERE {
   ?individuals foaf:knows ns:RockySmith
  }
  ''',
     initNs = {"ns": ns, "foaf": FOAF}
)
# Visualize the results
#With sparql
for r in g.query(q1):
  print(r.individuals)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
#Binding just for informative reasons
q1 = prepareQuery('''
  SELECT DISTINCT ?individuals  WHERE {
    ?animal a ns:Animal .
    ?individuals a ns:Animal .
   ?individuals foaf:knows ?animal .
  }
  ''',
     initNs = {"ns": ns, "foaf": FOAF}
)
# Visualize the results
#With sparql
for r in g.query(q1):
  print(r.individuals)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
#with * we see all exhaustive search of subclasses from Person, as well as persons.
q1 = prepareQuery('''
  SELECT ?individuals ?age ?subClasses  WHERE {
    ?subClasses rdfs:subClassOf* ns:LivingThing .
    ?individuals a ?subClasses .
    ?individuals foaf:age ?age .
  } ORDER BY DESC(?age)
  ''',
     initNs = {"ns": ns, "foaf": FOAF}
)

# Visualize the results
#With sparql
for r in g.query(q1):
  print(r.individuals, r.age, r.subClasses)