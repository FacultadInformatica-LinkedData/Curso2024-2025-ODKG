# -*- coding: utf-8 -*-
"""Task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qj_08lamTaCaw_MSb0x0nvjdRp5aiB32

**Task 06: Modifying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""Read the RDF file as shown in class"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example5.rdf", format="xml")

"""Create a new class named Researcher"""

ns = Namespace("http://somewhere#")
g.add((ns.Researcher, RDF.type, RDFS.Class))
for s, p, o in g:
  print(s,p,o)

"""**TASK 6.1: Create a new class named "University"**

"""

# TO DO
# Visualize the results

g.add((ns.University,RDF.type,RDFS.Class))

# Visualize the results
q = prepareQuery('''SELECT ?Subject WHERE {
   ?Subject ?Property rdfs:Class.

   FILTER(?Subject=ns:University)
  }

  ''',
  initNs = { "ns": ns,"rdfs":RDFS}
)

for r in g.query(q):
  print(r)

"""**TASK 6.2: Add "Researcher" as a subclass of "Person"**"""

# TO DO
# Visualize the results

from rdflib.plugins.sparql import prepareQuery

g.add((ns.Researcher,RDFS.subClassOf,ns.Person))



# Visualize the results
q = prepareQuery('''SELECT ?Subject WHERE {
   ?Subject rdfs:subClassOf ns:Person.
  }
  ''',
  initNs = { "ns": ns,"rdfs":RDFS}
)

for r in g.query(q):
  print(r)

"""**TASK 6.3: Create a new individual of Researcher named "Jane Smithers"**"""

# TO DO
# Visualize the results
g.add((ns.JaneSmithers, RDF.type, ns.Researcher))
# for s, p, o in g:
#   print(s,p,o)

# Visualize the results
q = prepareQuery('''SELECT ?Subject ?Property WHERE {
   ?Subject ?Property ns:Researcher.
  }
  ''',
  initNs = { "ns": ns}
)

for r in g.query(q):
  print(r)

"""**TASK 6.4: Add to the individual JaneSmithers the email address, fullName, given and family names. Use the https://schema.org vocabulary**"""

# TO DO

schema = Namespace("http://schema.org/")

g.add((ns.JaneSmithers,schema.email,Literal('janesmithers@janesmithers.net')))

g.add((ns.JaneSmithers,schema.fullName,Literal('Jane Marie Smithers')))

g.add((ns.JaneSmithers,schema.givenName,Literal('Jane')))

g.add((ns.JaneSmithers,schema.familyName,Literal('Smithers')))


# Visualize the results
for s, p, o in g.triples((ns.JaneSmithers,schema.fullName,None)):
  print(s,p,o)

for s,p,o in g.triples((ns.JaneSmithers,schema.email,None)):
  print(s,p,o)

for s,p,o in g.triples((ns.JaneSmithers,schema.givenName,None)):
  print(s,p,o)

for s,p,o in g.triples((ns.JaneSmithers,schema.familyName,None)):
  print(s,p,o)

"""**TASK 6.5: Add UPM as the university where John Smith works. Use the "https://example.org/ namespace**"""

# TO DO

EX = Namespace("http://example.org/")

g.add((ns.JohnSmith,EX.worksAt,Literal('UPM')))

# Visualize the results
q = prepareQuery('''
   SELECT ?Subject WHERE {
   ?Subject EX:worksAt 'UPM'.
  }
  ''',
  initNs = { "ns": ns,"EX":EX}
)

for r in g.query(q):
  print(r)

"""**Task 6.6: Add that Jown knows Jane using the FOAF vocabulary. Make sure the relationship exists.**"""

from rdflib import FOAF


g.add((ns.JaneSmithers,FOAF.knows,ns.JohnSmith))


# TO DO
# Visualize the results

# Visualize the results
q = prepareQuery('''
   SELECT ?Subject ?Object WHERE {
   ?Subject foaf:knows ?Object.
  }
  ''',
  initNs = {"foaf":FOAF}
)

for r in g.query(q):
  print(r)