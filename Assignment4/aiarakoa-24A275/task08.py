# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17y4eXXZYRJqPqyuxiLWLtBt0nO6qbSv4

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery

query_1 = """
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
  PREFIX data: <http://data.org#>

  SELECT ?person ?givenName ?familyName ?mail  WHERE
  {
    ?person a data:Person .
    OPTIONAL {?person vcard:Given ?givenName .}
    OPTIONAL {?person vcard:Family ?familyName .}
    OPTIONAL {?person vcard:EMAIL ?mail .}
  }
"""

for row in g1.query(query_1):
    print(f"{row.person} => Given name: '{row.givenName}'. Family name: '{row.familyName}'. Email address: '{row.mail}'")

merG = g1 + g2
query_2 = """
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
  PREFIX data: <http://data.org#>

  SELECT ?person ?givenName ?familyName ?mail  WHERE
  {
    ?person a data:Person .
    OPTIONAL {?person vcard:Given ?givenName .}
    OPTIONAL {?person vcard:Family ?familyName .}
    OPTIONAL {?person vcard:EMAIL ?mail .}
  }
"""

print(f"g2 contents")

for row in g2.query(query_2):
    print(f"{row.person} => Given name: '{row.givenName}'. Family name: '{row.familyName}'. Email address: '{row.mail}'")

print(f"merG (g1 + g2) contents")

for row in merG.query(query_2):
    print(f"{row.person} => Given name: '{row.givenName}'. Family name: '{row.familyName}'. Email address: '{row.mail}'")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

g3 = g1 + g1

query_6 = """
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
  PREFIX data: <http://data.org#>

  SELECT ?person ?givenName ?familyName ?mail WHERE
  {
    ?person a data:Person .
    OPTIONAL {?person vcard:Given ?givenName .}
    OPTIONAL {?person vcard:Family ?familyName .}
    OPTIONAL {?person vcard:EMAIL ?mail .}
  }
"""

query_6_specific_person = """
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>
  PREFIX data: <http://data.org#>

  SELECT ?givenName ?familyName ?mail WHERE
  {
    OPTIONAL {?personURI vcard:Given ?givenName .}
    OPTIONAL {?personURI vcard:Family ?familyName .}
    OPTIONAL {?personURI vcard:EMAIL ?mail .}
  }
"""

def field_updater(input_row, output_row, output_graph, dict_key):
  input_objects = {"Given": input_row.givenName, "Family": input_row.familyName, "EMAIL": input_row.mail}
  output_objects = {"Given": output_row.givenName, "Family": output_row.familyName, "EMAIL": output_row.mail}
  vcard_URIs_base = 'http://www.w3.org/2001/vcard-rdf/3.0#'
  if type(output_objects[dict_key]) == type(None):
    print(f"{output_row.person} has no {dict_key} value in output graph, adding '{input_objects[dict_key]}' from input graph instead")
    output_graph.add((URIRef(output_row.person), URIRef(vcard_URIs_base + dict_key), Literal(input_objects[dict_key])))
  else:
    print(f"{output_row.person} has '{output_objects[dict_key]}' as {dict_key} value in output graph")
  return

for g3_row_6a in g3.query(query_6):
  for g2_row_6a in g2.query(query_6_specific_person, initBindings={"personURI": URIRef(g3_row_6a.person)}):
    field_updater(g2_row_6a, g3_row_6a, g3, "Given")
    field_updater(g2_row_6a, g3_row_6a, g3, "Family")
    field_updater(g2_row_6a, g3_row_6a, g3, "EMAIL")

print(f"Original g1")

for g1_row_6b in g1.query(query_6):
  print(f"{g1_row_6b.person} => Given name: '{g1_row_6b.givenName}'. Family name: '{g1_row_6b.familyName}'. Email address: '{g1_row_6b.mail}'")

print(f"g1 revamped as g3 using g2 data")

for g3_row_6b in g3.query(query_6):
  print(f"{g3_row_6b.person} => Given name: '{g3_row_6b.givenName}'. Family name: '{g3_row_6b.familyName}'. Email address: '{g3_row_6b.mail}'")