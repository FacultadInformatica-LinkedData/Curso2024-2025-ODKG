# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pT7jmhaEaG9--iixSN5L9mwk-vWaqIL

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?SubClass WHERE {
    ?SubClass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": "http://somewhere#"}
)
for row in g.query(q1):
  print(row.SubClass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
q2 = prepareQuery('''
  SELECT ?individual WHERE
  {
    {
      ?individual a ns:Person .
    }
    UNION
    {
      ?subClass rdfs:subClassOf+ ns:Person .
      ?individual a ?subClass .
    }
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": "http://somewhere#"}
)
for row in g.query(q2):
  print(row.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
# Visualize the results
pure_sparql_query_1 = """
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns: <http://somewhere#>

  SELECT ?individual WHERE
  {
    {
      ?individual a ns:Person .
    }
    UNION
    {
      ?individual a ns:Animal .
    }
  }
"""

for row in g.query(pure_sparql_query_1):
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
# Visualize the results
pure_sparql_query_2 = """
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns: <http://somewhere#>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

  SELECT ?name WHERE
  {
    {
      ?individual a ns:Person .
    }
    UNION
    {
      ?subClass rdfs:subClassOf+ ns:Person .
      ?individual a ?subClass .
    }
    ?individual vcard:FN ?name .
  }
"""

for row in g.query(pure_sparql_query_2):
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
# Visualize the results
pure_sparql_query_3 = """
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns: <http://somewhere#>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

  SELECT ?individual ?name WHERE
  {
    {
      ?individual a ns:Animal .
    }
    UNION
    {
      ?subClass rdfs:subClassOf+ ns:Animal .
      ?individual a ?subClass .
    }
    ?individual foaf:knows ?anotherIndividual .
    ?anotherIndividual a ns:Animal .
    ?individual vcard:Given ?name .
  }
"""

for row in g.query(pure_sparql_query_3):
    print(row.name)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
# Visualize the results
pure_sparql_query_4 = """
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  PREFIX ns: <http://somewhere#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>

  SELECT ?age WHERE
  {
    ?subClass rdfs:subClassOf+ ns:LivingThing .
    ?individual a ?subClass .
    ?individual foaf:age ?age
  } ORDER by DESC(?age)
"""

for row in g.query(pure_sparql_query_4):
    print(row.age)