# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EJwdGA6qVXJ-TQ4mJe4VKX6mfwv84ukz

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf <http://somewhere#LivingThing>.
}
"""

# Execute the SPARQL query
results = g.query(query)

# Print the results
for row in results:
    print(row.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
person_uri = "http://somewhere#Person"

# Step 1: Find all subclasses of Person
subclass_query = """
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf <http://somewhere#Person>.
}
"""

subclasses = g.query(subclass_query)

# Create a list of subclasses URIs
subclass_list = [str(row.subclass) for row in subclasses]

# Include the Person class itself in the list
subclass_list.append(person_uri)

# Step 2: Find all individuals of the Person class and its subclasses
individuals_query = f"""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?individual WHERE {{
    ?individual rdf:type ?type .
    FILTER (?type IN ({', '.join(['<'+subclass+'> ' for subclass in subclass_list])}))
}}
"""

# Execute the SPARQL query to get individuals
individuals = g.query(individuals_query)

# Print the results
for row in individuals:
    print(row.individual)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# TO DO
animal_uri = "http://somewhere#Animal"

individuals_query = f"""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?individual WHERE {{
    {{ ?individual rdf:type <{person_uri}> }}
    UNION
    {{ ?individual rdf:type <{animal_uri}> }}
}}
"""

# Execute the SPARQL query to get individuals
individuals = g.query(individuals_query)

# Print the results
for row in individuals:
    print(row.individual)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# TO DO
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?name WHERE {
    {
        ?person rdf:type <http://somewhere#Person> .
    }
    UNION
    {
        ?person rdf:type ?subclass .
        ?subclass rdfs:subClassOf <http://somewhere#Person> .
    }
    ?person foaf:knows <http://somewhere#RockySmith> .
    ?person vcard:FN ?name .
}
"""

# Execute the SPARQL query to get names
names = g.query(query)

# Print the results
for row in names:
    print(row.name)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# TO DO
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT DISTINCT ?animalName WHERE {
    ?animal rdf:type <http://somewhere#Animal> .
    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type <http://somewhere#Animal> .
    ?animal vcard:Given ?animalName .
}
"""

# Execute the SPARQL query to get animal names
animal_names = g.query(query)

# Print the results
for row in animal_names:
    print(row.animalName)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# TO DO
query = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>

SELECT ?livingThing ?age
 WHERE {
    { ?livingThing rdf:type <http://somewhere#Person> .
      ?livingThing foaf:age ?age .}
    UNION
    { ?livingThing rdf:type <http://somewhere#Animal> .
      ?livingThing foaf:age ?age .}

    UNION
    { ?livingThing rdf:type <http://somewhere#Researcher> .
      ?livingThing foaf:age ?age .}

    UNION
    { ?livingThing rdf:type <http://somewhere#Professor> .
      ?livingThing foaf:age ?age .}

    }
ORDER BY DESC(?age)
"""

# Execute the SPARQL query to get living things and their ages
living_thing_ages = g.query(query)

# Print the results
for row in living_thing_ages:
    print(f"{row.livingThing}: {row.age}")