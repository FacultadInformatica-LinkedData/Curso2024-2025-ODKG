# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

from rdflib.plugins.sparql import prepareQuery

# Using RDFLib
ns = Namespace("http://somewhere#")
rdfs = Namespace("http://www.w3.org/2000/01/rdf-schema#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

def printSubClasses(c):
  for s, p, o in g.triples((None, RDFS.subClassOf, c)):
    print(s)
    printSubClasses(s)


print("Print results using RDFLib")
#for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
#    print(s)
printSubClasses(ns.LivingThing)

# Using SPARQL
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf+ ns:LivingThing
  }
  ''',
  initNs={"vcard": vcard, "rdfs": rdfs, "ns": ns}
)

print("\nPrint results using SPARQL:")
for r in g.query(q1):
    print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""

# RDFLib.
def printTypeOfSubClasses(c):
  for s, p, o in g.triples((None, RDF.type, c)):
    print(s)
  for sub, p, o in g.triples((None,RDFS.subClassOf,c)):
    for s, p, o in g.triples((None,RDF.type,sub)):
      print(s)
      printTypeOfSubClasses(s)

printTypeOfSubClasses(ns.Person)

# Using SPARQL
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject a/rdfs:subClassOf* ns:Person
  }
  ''',
  initNs={"vcard": vcard, "rdfs": rdfs, "ns": ns}
)

# TO DO
# Visualize the results
for r in g.query(q1):
    print(r.Subject)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**"""
  
# Using SPARQL
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    {
    ?Subject a ns:Person
    }union
    {
      ?Subject a ns:Animal
    }
  }
  ''',
  initNs={"vcard": vcard, "rdfs": rdfs, "ns": ns}
)

# TO DO
# Visualize the results
for r in g.query(q1):
    print(r.Subject)


"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# Using SPARQL
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    {
    ?Subject a ns:Person;
        <http://xmlns.com/foaf/0.1/knows> ns:RockySmith

    }
  }
  ''',
  initNs={"vcard": vcard, "rdfs": rdfs, "ns": ns}
)

# TO DO
# Visualize the results
for r in g.query(q1):
    print(r.Subject)


"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# Using SPARQL
q5 = '''
  SELECT ?name WHERE {
    ?animal rdf:type ns:Animal .
    ?animal ns:knows ?otherAnimal .
    ?otherAnimal rdf:type ns:Animal .
    ?animal vcard:FN ?name .
  }
   '''
  
# TO DO
# Visualize the results
for r in g.query(q5):
  print(r.name)


"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# Using SPARQL
q6 = '''
  SELECT ?livingThing ?age WHERE {
    ?livingThing rdf:type/rdfs:subClassOf* ns:LivingThing .
    ?livingThing ns:age ?age .
  }
  ORDER BY DESC(?age)
  '''
  
# TO DO
# Visualize the results
for r in g.query(q6):
  print(f"{r.livingThing}: {r.age}")
