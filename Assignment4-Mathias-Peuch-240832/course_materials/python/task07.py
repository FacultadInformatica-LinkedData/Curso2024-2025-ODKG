# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yQcfwsvWPQZZ2fDhYrQx7X4Zg7F7GhfG

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

ns = Namespace("http://somewhere#")
print("RDFLib:")
for s,p,o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s,p,o)


from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?s
  WHERE {
    ?s rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": ns}
)
print("SPARQL:")
for s in g.query(q1):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

print("RDFLib:")
for s,p,o in g.triples((None, RDF.type, ns.Person)):
  print(s)
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for ss,pp,oo in g.triples((None, RDF.type, s)):
    print(ss)

q2 = prepareQuery('''
  SELECT ?ss
  WHERE {
    {
      ?ss rdf:type ns:Person.
    } UNION {
      ?sss rdfs:subClassOf ns:Person.
      ?ss rdf:type ?sss
    }
  }
  ''',
  initNs = { "rdfs": RDFS,"rdf": RDF, "ns": ns}
)
print("SPARQL:")
for s2 in g.query(q2):
  print(s2)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

q3 = prepareQuery('''
  SELECT ?ss
  WHERE {
    {
      ?ss rdf:type ns:Person.
    } UNION {
      ?ss rdf:type ns:Animal.
    }
  }
  ''',
  initNs = {"rdf": RDF, "ns": ns}
)
print("SPARQL:")
for s3 in g.query(q3):
  print(s3)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

q4 = """
  PREFIX ns: <http://somewhere#>
  PREFIX foaf: <http://xmlns.com/foaf/0.1/>
  PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0/>
 SELECT ?subject ?name
 WHERE {
   ?subject foaf:knows ns:RockySmith.
    ?subject vcard:Given ?name .
 }
  """
for r in g.query(q4):
  print(r[1])

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

q5 = """
 SELECT  distinct ?subject
 WHERE {
   ?subject foaf:knows ?object .
   ?object foaf:knows ?object1 .
   FILTER(?object != ?object1)
 }
 """
for r in g.query(q5):
  print(r[0])

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

q6 = """

SELECT ?age ?subject
WHERE {
  ?subject foaf:age ?age .
}
ORDER BY DESC(?age)
LIMIT 100
"""
for r in g.query(q6):
  print(r[0],r[1])