# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/ana-m-m/Curso2024-2025-ODKG/blob/master/Assignment4/course_materials/notebooks/Task07.ipynb

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2024-2025/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# RDFLIB
ns=Namespace('http://somewhere#')

for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s, p, o)



# SPARQL
from rdflib.plugins.sparql import prepareQuery


VCARD = "http://www.w3.org/2001/vcard-rdf/3.0#"

q1 = prepareQuery( """

PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?subclass
WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
}
""",
  initNs = { "vcard": VCARD, "ns":ns})


for r in g.query(q1):
 print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# RDFLIB

for s, p, o in g.triples((None, None, ns.Person)):
  print(s, p, o)

# SPARQL
q2 = prepareQuery("""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ns: <http://somewhere#>

SELECT ?s
WHERE {
    ?s ?p ns:Person.
    }
    """, initNs={"ns": ns, "rdf": RDF})

for r in g.query(q2):
 print(r)

"""**TASK 7.3: List all individuals of just "Person" or "Animal". You do not need to list the individuals of the subclasses of person (in SPARQL only)**

"""

# SPARQL
q3 = prepareQuery("""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ns: <http://somewhere#>

SELECT ?individual
WHERE {
  {

    ?individual rdf:type ns:Person . # using rdf:type
  }
  UNION
  {

    ?individual rdf:type ns:Animal .
  }
}
    """, initNs={"ns": ns, "rdf": RDF})

for r in g.query(q3):
 print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky (in SPARQL only)**"""

# SPARQL
FOAF = "http://xmlns.com/foaf/0.1/"
q4 = prepareQuery("""

PREFIX ns: <http://somewhere#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?s
WHERE {
    ?s foaf:knows ns:RockySmith.
    ?s rdf:type ?type.
    ?type rdfs:subClassOf* ns:Person.
}
""", initNs={"ns": ns,  "foaf": FOAF})


for r in g.query(q4):
 print(r)

"""**Task 7.5: List the name of those animals who know at least another animal in the graph (in SPARQL only)**"""

# SPARQL
FOAF = "http://xmlns.com/foaf/0.1/"
q5 = prepareQuery("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX vcard: <http://www.w3.org/2001/vcard-rdf/3.0#>

SELECT ?animalName
WHERE {
    ?animal rdf:type ?type .
    ?type rdfs:subClassOf* ns:Animal .

    ?animal foaf:knows ?otherAnimal .
    ?otherAnimal rdf:type ?otherType .
    ?otherType rdfs:subClassOf* ns:Animal .

    ?animal vcard:Given ?animalName .
}
""", initNs={"ns": ns,  "foaf": FOAF})


for r in g.query(q5):
 print(r)

"""**Task 7.6: List the age of all living things in descending order (in SPARQL only)**"""

# SPARQL
q6 = prepareQuery("""
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ns: <http://somewhere#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT ?livingThing ?age
WHERE {

    ?livingThing rdf:type ?type .
    ?type rdfs:subClassOf* ns:LivingThing .
    ?livingThing foaf:age ?age .
}
ORDER BY DESC(?age) # ordering desc
""")

# Execute the query and print results
for r in g.query(q6):
    print(f"livingThing: {r.livingThing}, age: {r.age}")

