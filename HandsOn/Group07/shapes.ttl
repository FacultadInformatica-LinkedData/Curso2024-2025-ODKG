@prefix owl:  <http://www.w3.org/2002/07/owl#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh:   <http://www.w3.org/ns/shacl#> .
@prefix shsh: <http://www.w3.org/ns/shacl-shacl#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

shsh:ShapesListShape  rdf:type  sh:NodeShape;
        sh:property         [ sh:node  shsh:ShapeShape;
                              sh:path  ( [ sh:zeroOrMorePath  rdf:rest ]
                                         rdf:first
                                       )
                            ];
        sh:targetObjectsOf  sh:and , sh:or , sh:xone .

shsh:ShapesGraphShape
        rdf:type            sh:NodeShape;
        sh:nodeKind         sh:IRI;
        sh:targetObjectsOf  sh:shapesGraph .

shsh:ListNodeShape  rdf:type  sh:NodeShape;
        rdfs:comment  "Defines constraints on what it means for a node to be a node within a well-formed RDF list. Note that this does not check whether the rdf:rest items are also well-formed lists as this would lead to unsupported recursion."@en;
        rdfs:label    "List node shape"@en;
        sh:or         ( [ sh:hasValue  ();
                          sh:property  [ sh:maxCount  0;
                                         sh:path      rdf:first
                                       ];
                          sh:property  [ sh:maxCount  0;
                                         sh:path      rdf:rest
                                       ]
                        ]
                        [ sh:not       [ sh:hasValue  ()
                                       ];
                          sh:property  [ sh:maxCount  1;
                                         sh:minCount  1;
                                         sh:path      rdf:first
                                       ];
                          sh:property  [ sh:maxCount  1;
                                         sh:minCount  1;
                                         sh:path      rdf:rest
                                       ]
                        ]
                      ) .

shsh:   rdfs:comment  "This shapes graph can be used to validate SHACL shapes graphs against a subset of the syntax rules."@en;
        rdfs:label    "SHACL for SHACL"@en;
        sh:declare    [ sh:namespace  "http://www.w3.org/ns/shacl-shacl#";
                        sh:prefix     "shsh"
                      ] .

shsh:PathListWithAtLeast2Members
        rdf:type     sh:NodeShape;
        sh:node      shsh:ListShape;
        sh:property  [ sh:minCount  2;
                       sh:path      [ sh:oneOrMorePath  rdf:rest ]
                     ] .

shsh:PathShape  rdf:type  sh:NodeShape;
        rdfs:comment  "A shape that can be used to validate the syntax rules of well-formed SHACL paths."@en;
        rdfs:label    "Path shape"@en;
        rdfs:seeAlso  <https://www.w3.org/TR/shacl/#property-paths>;
        sh:property   [ sh:node  shsh:PathNodeShape;
                        sh:path  [ sh:zeroOrMorePath  [ sh:alternativePath  ( ( [ sh:zeroOrMorePath  rdf:rest ]
                                                                                rdf:first
                                                                              ) ( sh:alternativePath
                                                                                  [ sh:zeroOrMorePath  rdf:rest ]
                                                                                  rdf:first
                                                                                ) sh:inversePath sh:zeroOrMorePath sh:oneOrMorePath sh:zeroOrOnePath )
                                                      ]
                                 ]
                      ] .

shsh:ListShape  rdf:type  sh:NodeShape;
        rdfs:comment  "A shape describing well-formed RDF lists. Currently does not check for non-recursion. This could be expressed using SHACL-SPARQL."@en;
        rdfs:label    "List shape"@en;
        rdfs:seeAlso  <https://www.w3.org/TR/shacl/#syntax-rule-SHACL-list>;
        sh:property   [ rdfs:comment  "Each list member (including this node) must be have the shape shsh:ListNodeShape."@en;
                        sh:hasValue   ();
                        sh:node       shsh:ListNodeShape;
                        sh:path       [ sh:zeroOrMorePath  rdf:rest ]
                      ] .

shsh:PropertyShapeShape
        rdf:type            sh:NodeShape;
        sh:property         [ sh:maxCount  1;
                              sh:minCount  1;
                              sh:or        ( shsh:PathShape
                                             [ sh:nodeKind  sh:IRI ]
                                           );
                              sh:path      sh:path
                            ];
        sh:targetObjectsOf  sh:property .

shsh:NodeShapeShape  rdf:type  sh:NodeShape;
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:path
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:lessThan
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:lessThanOrEquals
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:maxCount
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:minCount
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:qualifiedValueShape
                            ];
        sh:property         [ sh:maxCount  0;
                              sh:path      sh:uniqueLang
                            ];
        sh:targetObjectsOf  sh:node .

shsh:ShapeShape  rdf:type    sh:NodeShape;
        rdfs:comment         "A shape that can be used to validate syntax rules for other shapes."@en;
        rdfs:label           "Shape shape"@en;
        sh:or                ( [ sh:not  [ sh:class  rdfs:Class;
                                           sh:or     ( [ sh:class  sh:NodeShape ]
                                                       [ sh:class  sh:PropertyShape ]
                                                     )
                                         ]
                               ]
                               [ sh:nodeKind  sh:IRI ]
                             );
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:Literal;
                               sh:path      sh:minInclusive
                             ];
        sh:property          [ sh:or    ( [ sh:datatype  xsd:string ]
                                          [ sh:datatype  rdf:langString ]
                                        );
                               sh:path  sh:message
                             ];
        sh:property          [ sh:datatype  xsd:string;
                               sh:path      ( sh:languageIn
                                              [ sh:zeroOrMorePath  rdf:rest ]
                                              rdf:first
                                            )
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:minCount
                             ];
        sh:property          [ sh:node  shsh:ListShape;
                               sh:path  sh:and
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:lessThanOrEquals
                             ];
        sh:property          [ sh:datatype  xsd:boolean;
                               sh:maxCount  1;
                               sh:path      sh:closed
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:disjoint
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:node      shsh:ListShape;
                               sh:path      sh:in
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:node      shsh:ListShape;
                               sh:path      sh:languageIn
                             ];
        sh:property          [ sh:node  shsh:ListShape;
                               sh:path  sh:xone
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:IRI;
                               sh:path      sh:datatype
                             ];
        sh:property          [ sh:datatype  xsd:boolean;
                               sh:maxCount  1;
                               sh:path      sh:uniqueLang
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:targetObjectsOf
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:maxCount
                             ];
        sh:property          [ sh:in        ( sh:BlankNode sh:IRI sh:Literal sh:BlankNodeOrIRI sh:BlankNodeOrLiteral sh:IRIOrLiteral );
                               sh:maxCount  1;
                               sh:path      sh:nodeKind
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:maxLength
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:Literal;
                               sh:path      sh:maxInclusive
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:node      shsh:ListShape;
                               sh:path      sh:ignoredProperties
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:path      sh:qualifiedValueShape
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:equals
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:targetClass
                             ];
        sh:property          [ sh:in        ( true false );
                               sh:maxCount  1;
                               sh:path      sh:deactivated
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      ( sh:ignoredProperties
                                              [ sh:zeroOrMorePath  rdf:rest ]
                                              rdf:first
                                            )
                             ];
        sh:property          [ sh:nodeKind  sh:IRIOrLiteral;
                               sh:path      sh:targetNode
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:Literal;
                               sh:path      sh:minExclusive
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:qualifiedMaxCount
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:IRI;
                               sh:path      sh:severity
                             ];
        sh:property          [ sh:datatype  xsd:string;
                               sh:maxCount  1;
                               sh:path      sh:flags
                             ];
        sh:property          [ sh:node  shsh:ListShape;
                               sh:path  sh:or
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:targetSubjectsOf
                             ];
        sh:property          [ sh:datatype  xsd:boolean;
                               sh:maxCount  1;
                               sh:path      sh:qualifiedValueShapesDisjoint
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:minLength
                             ];
        sh:property          [ sh:maxCount  1;
                               sh:nodeKind  sh:Literal;
                               sh:path      sh:maxExclusive
                             ];
        sh:property          [ sh:datatype  xsd:string;
                               sh:maxCount  1;
                               sh:path      sh:pattern
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:class
                             ];
        sh:property          [ sh:datatype  xsd:integer;
                               sh:maxCount  1;
                               sh:path      sh:qualifiedMinCount
                             ];
        sh:property          [ sh:nodeKind  sh:IRI;
                               sh:path      sh:lessThan
                             ];
        sh:targetClass       sh:NodeShape , sh:PropertyShape;
        sh:targetObjectsOf   sh:not , sh:qualifiedValueShape , sh:node , sh:property;
        sh:targetSubjectsOf  sh:languageIn , sh:pattern , sh:qualifiedValueShape , sh:targetClass , sh:minLength , sh:maxLength , sh:or , sh:ignoredProperties , sh:minInclusive , sh:targetSubjectsOf , sh:equals , sh:qualifiedValueShapesDisjoint , sh:xone , sh:hasValue , sh:class , sh:uniqueLang , sh:qualifiedMaxCount , sh:nodeKind , sh:disjoint , sh:not , sh:in , sh:flags , sh:lessThanOrEquals , sh:maxExclusive , sh:qualifiedMinCount , sh:targetObjectsOf , sh:property , sh:node , sh:targetNode , sh:datatype , sh:sparql , sh:closed , sh:maxCount , sh:and , sh:minCount , sh:minExclusive , sh:maxInclusive , sh:lessThan;
        sh:xone              ( shsh:NodeShapeShape shsh:PropertyShapeShape ) .

shsh:PathNodeShape  sh:xone  ( [ sh:nodeKind  sh:IRI ]
                               [ sh:node      shsh:PathListWithAtLeast2Members;
                                 sh:nodeKind  sh:BlankNode
                               ]
                               [ sh:closed    true;
                                 sh:nodeKind  sh:BlankNode;
                                 sh:property  [ sh:maxCount  1;
                                                sh:minCount  1;
                                                sh:node      shsh:PathListWithAtLeast2Members;
                                                sh:path      sh:alternativePath
                                              ]
                               ]
                               [ sh:closed    true;
                                 sh:nodeKind  sh:BlankNode;
                                 sh:property  [ sh:maxCount  1;
                                                sh:minCount  1;
                                                sh:path      sh:inversePath
                                              ]
                               ]
                               [ sh:closed    true;
                                 sh:nodeKind  sh:BlankNode;
                                 sh:property  [ sh:maxCount  1;
                                                sh:minCount  1;
                                                sh:path      sh:zeroOrMorePath
                                              ]
                               ]
                               [ sh:closed    true;
                                 sh:nodeKind  sh:BlankNode;
                                 sh:property  [ sh:maxCount  1;
                                                sh:minCount  1;
                                                sh:path      sh:oneOrMorePath
                                              ]
                               ]
                               [ sh:closed    true;
                                 sh:nodeKind  sh:BlankNode;
                                 sh:property  [ sh:maxCount  1;
                                                sh:minCount  1;
                                                sh:path      sh:zeroOrOnePath
                                              ]
                               ]
                             ) .

shsh:EntailmentShape  rdf:type  sh:NodeShape;
        sh:nodeKind         sh:IRI;
        sh:targetObjectsOf  sh:entailment .
